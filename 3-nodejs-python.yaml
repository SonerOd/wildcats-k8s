# KAFKA CONSUMER (PYTHON)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-consumer
  namespace: appdynamics-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-consumer
  template:
    metadata:
      labels:
        app: kafka-consumer
    spec:
      containers:
        - name: app
          image: python:3.9-slim
          command: ["/bin/sh"]
          args:
            - -c
            - |
              pip install kafka-python
              cat > consumer.py << 'EOF'
              from kafka import KafkaConsumer, KafkaProducer
              import json
              import time
              
              print("Waiting for Kafka to be ready...")
              time.sleep(30)
              
              try:
                  consumer = KafkaConsumer(
                      'credit-checks', 'transactions',
                      bootstrap_servers=['kafka:9092'],
                      auto_offset_reset='earliest',
                      group_id='python-consumer'
                  )
              
                  producer = KafkaProducer(
                      bootstrap_servers=['kafka:9092'],
                      value_serializer=lambda x: json.dumps(x).encode('utf-8')
                  )
              
                  print("Kafka Consumer started")
              
                  # Send periodic test messages
                  counter = 0
                  while True:
                      producer.send('credit-responses', {'counter': counter, 'status': 'processed'})
                      print(f"Sent message {counter}")
                      counter += 1
                      time.sleep(10)
              
              except Exception as e:
                  print(f"Error: {e}")
                  while True:
                      time.sleep(60)
              EOF
              python consumer.py
---
# RABBITMQ CONSUMER (PYTHON)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-consumer
  namespace: appdynamics-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq-consumer
  template:
    metadata:
      labels:
        app: rabbitmq-consumer
    spec:
      containers:
        - name: app
          image: python:3.9-slim
          command: ["/bin/sh"]
          args:
            - -c
            - |
              pip install pika
              cat > consumer.py << 'EOF'
              import pika
              import time
              import json
              
              print("Waiting for RabbitMQ to be ready...")
              time.sleep(30)
              
              while True:
                  try:
                      connection = pika.BlockingConnection(
                          pika.ConnectionParameters(
                              host='rabbitmq',
                              credentials=pika.PlainCredentials('admin', 'admin')
                          )
                      )
                      channel = connection.channel()
              
                      channel.exchange_declare(exchange='loan-exchange', exchange_type='topic', durable=True)
                      channel.queue_declare(queue='loan-queue', durable=True)
                      channel.queue_bind(exchange='loan-exchange', queue='loan-queue', routing_key='loan.*')
              
                      def callback(ch, method, properties, body):
                          print(f"Received: {body.decode()}")
              
                      channel.basic_consume(queue='loan-queue', on_message_callback=callback, auto_ack=True)
              
                      print('RabbitMQ Consumer started')
                      channel.start_consuming()
              
                  except Exception as e:
                      print(f"Connection failed: {e}. Retrying...")
                      time.sleep(5)
              EOF
              python consumer.py